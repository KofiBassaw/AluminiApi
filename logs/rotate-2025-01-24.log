{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Session has expired"}
{"content_length":"45","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":3396.327,"status":200,"url":"/alumini/api/v1/setup/addContinent"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"183","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5814.466,"status":200,"url":"/alumini/api/v1/setup/addContinent"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.Session.findFirst()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/UserDB.js:21:49\n\n  18 if (!token) {\n  19     return resolve(null);\n  20 }\n→ 21 const record = await prisma.Session.findFirst(\nCan't reach database server at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`\n\nPlease make sure your database server is running at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.Session.findFirst()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/UserDB.js:21:49\n\n  18 if (!token) {\n  19     return resolve(null);\n  20 }\n→ 21 const record = await prisma.Session.findFirst(\nCan't reach database server at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`\n\nPlease make sure your database server is running at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`.\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:7177)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/UserDB.js:21:28"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.Session.findFirst()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/UserDB.js:21:49\n\n  18 if (!token) {\n  19     return resolve(null);\n  20 }\n→ 21 const record = await prisma.Session.findFirst(\nCan't reach database server at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`\n\nPlease make sure your database server is running at `ep-shy-mountain-a5ikktzw-pooler.us-east-2.aws.neon.tech:5432`."}
{"content_length":"494","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":51.906,"status":500,"url":"/alumini/api/v1/event/add"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: \"2025-01-28\",\n                            ~~~~~~~~~~~~\n                 eventStartTime: \"09:30:00\",\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventDate`: premature end of input. Expected ISO-8601 DateTime.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: \"2025-01-28\",\n                            ~~~~~~~~~~~~\n                 eventStartTime: \"09:30:00\",\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventDate`: premature end of input. Expected ISO-8601 DateTime.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.add (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:19:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: \"2025-01-28\",\n                            ~~~~~~~~~~~~\n                 eventStartTime: \"09:30:00\",\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventDate`: premature end of input. Expected ISO-8601 DateTime."}
{"content_length":"1477","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":6424.971,"status":500,"url":"/alumini/api/v1/event/add"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"error","message":"eventDate is not defined"}
{"content_length":"49","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":4187.965,"status":500,"url":"/alumini/api/v1/event/add"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: new Date(\"2025-01-28T00:00:00.000Z\"),\n                 eventStartTime: \"09:30:00\",\n                                 ~~~~~~~~~~\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventStartTime`: input contains invalid characters. Expected ISO-8601 DateTime.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: new Date(\"2025-01-28T00:00:00.000Z\"),\n                 eventStartTime: \"09:30:00\",\n                                 ~~~~~~~~~~\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventStartTime`: input contains invalid characters. Expected ISO-8601 DateTime.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.add (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:20:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create({\n               data: {\n                 eventDate: new Date(\"2025-01-28T00:00:00.000Z\"),\n                 eventStartTime: \"09:30:00\",\n                                 ~~~~~~~~~~\n                 eventEndTime: \"15:00:00\",\n                 eventTitle: \"Karoki week\",\n                 eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                 eventLocation: \"Accra\",\n                 eventCoverImage: \"sampleimage.jpg\",\n                 eventHashTag: [\n                   \"#karoki\",\n                   \"#fresher\",\n                   \"#newbie\"\n                 ],\n                 added_by_id: \"clx21jho80000wa7h93fzj9va\"\n               }\n             })\n\nInvalid value for argument `eventStartTime`: input contains invalid characters. Expected ISO-8601 DateTime."}
{"content_length":"1520","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5267.737,"status":500,"url":"/alumini/api/v1/event/add"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"892","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":6320.169,"status":200,"url":"/alumini/api/v1/event/add"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","code":"P2002","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create(\nUnique constraint failed on the fields: (`event_id`)","meta":{"modelName":"Event","target":["event_id"]},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create(\nUnique constraint failed on the fields: (`event_id`)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6877)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.add (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:20:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:13:43\n\n  10 ussd.add = async (event) => {\n  11     try {\n  12         \n→ 13         const newJob = await prisma.event.create(\nUnique constraint failed on the fields: (`event_id`)"}
{"content_length":"340","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5836.357,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.updateEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:28)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:51:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing."}
{"content_length":"1741","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5882.269,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.updateEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:28)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:51:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing."}
{"content_length":"1741","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5150.701,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.updateEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:28)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:52:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing."}
{"content_length":"1741","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5312.566,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.updateEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:28)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:53:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing."}
{"content_length":"1741","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5248.814,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.updateEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:28)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:53:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.event.update()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:33:47\n\n  30 \n  31 ussd.updateEvent = async (event_id, event) => {\n  32     try {\n→ 33         const updatedJob = await prisma.event.update({\n               where: {\n                 event_id: {\n                   id: 1,\n                   event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                   date_added: \"2025-01-24T16:31:16.892Z\",\n                   status: 1,\n                   eventDate: \"2025-01-28T00:00:00.000Z\",\n                   eventStartTime: \"09:30:00\",\n                   eventEndTime: \"15:00:00\",\n                   eventTitle: \"Karoki week main\",\n                   eventDescription: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem\",\n                   eventLocation: \"Accra\",\n                   eventCoverImage: \"sampleimage.jpg\",\n                   eventHashTag: [\n                     \"#karoki\",\n                     \"#fresher\",\n                     \"#newbie\"\n                   ],\n                   added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                 }\n               },\n             + data: EventUpdateInput | EventUncheckedUpdateInput\n             })\n\nArgument `data` is missing."}
{"content_length":"1741","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5250.175,"status":500,"url":"/alumini/api/v1/event/update-event"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"897","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5917.49,"status":200,"url":"/alumini/api/v1/event/update-event"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  booking_id: undefined,\n              ?   event_id_user_id?: EventBookingEvent_idUser_idCompoundUniqueInput,\n              ?   AND?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   OR?: EventBookingWhereInput[],\n              ?   NOT?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   id?: IntFilter | Int,\n              ?   date_added?: DateTimeFilter | DateTime,\n              ?   status?: IntFilter | Int,\n              ?   user_id?: StringFilter | String,\n              ?   event_id?: StringFilter | String,\n              ?   event?: EventRelationFilter | EventWhereInput,\n              ?   user?: UserRelationFilter | UserWhereInput\n                },\n                update: {\n                  status: undefined\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                }\n              })\n\nArgument `where` of type EventBookingWhereUniqueInput needs at least one of `booking_id` or `event_id_user_id` arguments. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  booking_id: undefined,\n              ?   event_id_user_id?: EventBookingEvent_idUser_idCompoundUniqueInput,\n              ?   AND?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   OR?: EventBookingWhereInput[],\n              ?   NOT?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   id?: IntFilter | Int,\n              ?   date_added?: DateTimeFilter | DateTime,\n              ?   status?: IntFilter | Int,\n              ?   user_id?: StringFilter | String,\n              ?   event_id?: StringFilter | String,\n              ?   event?: EventRelationFilter | EventWhereInput,\n              ?   user?: UserRelationFilter | UserWhereInput\n                },\n                update: {\n                  status: undefined\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                }\n              })\n\nArgument `where` of type EventBookingWhereUniqueInput needs at least one of `booking_id` or `event_id_user_id` arguments. Available options are marked with ?.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.bookEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:90:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  booking_id: undefined,\n              ?   event_id_user_id?: EventBookingEvent_idUser_idCompoundUniqueInput,\n              ?   AND?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   OR?: EventBookingWhereInput[],\n              ?   NOT?: EventBookingWhereInput | EventBookingWhereInput[],\n              ?   id?: IntFilter | Int,\n              ?   date_added?: DateTimeFilter | DateTime,\n              ?   status?: IntFilter | Int,\n              ?   user_id?: StringFilter | String,\n              ?   event_id?: StringFilter | String,\n              ?   event?: EventRelationFilter | EventWhereInput,\n              ?   user?: UserRelationFilter | UserWhereInput\n                },\n                update: {\n                  status: undefined\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\"\n                }\n              })\n\nArgument `where` of type EventBookingWhereUniqueInput needs at least one of `booking_id` or `event_id_user_id` arguments. Available options are marked with ?."}
{"content_length":"1562","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5789.97,"status":500,"url":"/alumini/api/v1/event/book"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"clientVersion":"5.15.0","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  event_id_user_id: {\n                    event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                    user_id: \"clx21jho80000wa7h93fzj9va\"\n                  }\n                },\n                update: {\n                  status: 1\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\",\n                  ~~~~~~~~~~~\n              ?   id?: Int,\n              ?   booking_id?: String,\n              ?   date_added?: DateTime,\n              ?   status?: Int\n                }\n              })\n\nUnknown argument `added_by_id`. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  event_id_user_id: {\n                    event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                    user_id: \"clx21jho80000wa7h93fzj9va\"\n                  }\n                },\n                update: {\n                  status: 1\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\",\n                  ~~~~~~~~~~~\n              ?   id?: Int,\n              ?   booking_id?: String,\n              ?   date_added?: DateTime,\n              ?   status?: Int\n                }\n              })\n\nUnknown argument `added_by_id`. Available options are marked with ?.\n    at Tn (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:115:6855)\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6533)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.bookEvent (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/EventController.js:90:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.eventBooking.upsert()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/EventDb.js:109:50\n\n  106 \n  107 ussd.bookEvent = async (booking) => {\n  108     try {\n→ 109         const newJob = await prisma.eventBooking.upsert({\n                where: {\n                  event_id_user_id: {\n                    event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                    user_id: \"clx21jho80000wa7h93fzj9va\"\n                  }\n                },\n                update: {\n                  status: 1\n                },\n                create: {\n                  user_id: \"clx21jho80000wa7h93fzj9va\",\n                  event_id: \"55d43de9-a851-4773-a231-9d7a1ff08297\",\n                  added_by_id: \"clx21jho80000wa7h93fzj9va\",\n                  ~~~~~~~~~~~\n              ?   id?: Int,\n              ?   booking_id?: String,\n              ?   date_added?: DateTime,\n              ?   status?: Int\n                }\n              })\n\nUnknown argument `added_by_id`. Available options are marked with ?."}
{"content_length":"1124","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5498.972,"status":500,"url":"/alumini/api/v1/event/book"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"239","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5815.356,"status":200,"url":"/alumini/api/v1/event/book"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"2536","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"GET","response_time":7825.666,"status":200,"url":"/alumini/api/v1/event/active-event"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"1661","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"GET","response_time":6650.146,"status":200,"url":"/alumini/api/v1/event/user-active-event"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Session has expired"}
{"content_length":"45","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":3412.855,"status":200,"url":"/alumini/api/v1/discussion/add"}
{"clientVersion":"5.15.0","code":"P2022","label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.discussion.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/DiscussionDb.js:16:48\n\n  13 ussd.add = async (discussion) => {\n  14     try {\n  15         \n→ 16         const newJob = await prisma.discussion.create(\nThe column `cover_image` does not exist in the current database.","meta":{"column":"cover_image","modelName":"Discussion"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.discussion.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/DiscussionDb.js:16:48\n\n  13 ussd.add = async (discussion) => {\n  14     try {\n  15         \n→ 16         const newJob = await prisma.discussion.create(\nThe column `cover_image` does not exist in the current database.\n    at In.handleRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6877)\n    at In.handleAndLogRequestError (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:6211)\n    at In.request (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:122:5919)\n    at async l (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/@prisma/client/runtime/library.js:127:11167)\n    at async ussd.add (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/DiscussionDb.js:16:24)\n    at async /Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/controllers/DiscussionsController.js:19:17"}
{"label":"Exact health api logs","level":"error","message":"\nInvalid `prisma.discussion.create()` invocation in\n/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/DBFunctions/DiscussionDb.js:16:48\n\n  13 ussd.add = async (discussion) => {\n  14     try {\n  15         \n→ 16         const newJob = await prisma.discussion.create(\nThe column `cover_image` does not exist in the current database."}
{"content_length":"372","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5818.041,"status":500,"url":"/alumini/api/v1/discussion/add"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"277","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5627.663,"status":200,"url":"/alumini/api/v1/discussion/add"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"282","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5773.771,"status":200,"url":"/alumini/api/v1/discussion/update-discussion"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"296","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":6065.327,"status":200,"url":"/alumini/api/v1/discussion/add-message"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"343","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"POST","response_time":5886.409,"status":200,"url":"/alumini/api/v1/discussion/add-message"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"debug","message":"Alumini App: Running in development mode and listening on port http://:9004"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"866","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"GET","response_time":6261.501,"status":200,"url":"/alumini/api/v1/discussion/active-discussion"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
{"label":"Exact health api logs","level":"info","message":"Success"}
{"content_length":"1914","label":"Exact health api logs","level":"http","message":"incoming-api-request","method":"GET","response_time":7578.838,"status":200,"url":"/alumini/api/v1/discussion/discussion-details/229d2282-3e47-4e51-9727-5ed8a257d425"}
{"code":"3D000","file":"postinit.c","label":"Exact health api logs","length":93,"level":"error","line":"1021","message":"database \"alumini\" does not exist","name":"error","routine":"InitPostgres","severity":"FATAL","stack":"error: database \"alumini\" does not exist\n    at Parser.parseErrorMessage (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:283:98)\n    at Parser.handlePacket (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:122:29)\n    at Parser.parse (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/parser.js:35:38)\n    at Socket.<anonymous> (/Users/testdevice/Desktop/Source Code/Node JS/AluminiApi/node_modules/pg-protocol/dist/index.js:11:42)\n    at Socket.emit (node:events:519:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\n    at Readable.push (node:internal/streams/readable:390:5)\n    at TCP.onStreamRead (node:internal/stream_base_commons:191:23)"}
{"label":"Exact health api logs","level":"error","message":"database \"alumini\" does not exist"}
